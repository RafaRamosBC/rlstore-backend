// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Product {
  id          String  @id @default(uuid()) // ID único universal
  name        String
  description String?
  price       Float
  stock       Int     @default(0)
  sku         String? @unique
  imageUrl    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems CartItem[]
  orderItems OrderItem[]
}

model Cart {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[] // Relação um-para-muitos com CartItem

  // Para um carrinho "anônimo" que pode expirar ou ser identificado por uma sessão
  sessionId String? @unique // pode ser usado para identificar a sessão do "dono" do carrinho
}

model CartItem {
  id        String  @id @default(uuid())
  quantity  Int
  productId String // Chave estrangeira para Product
  product   Product @relation(fields: [productId], references: [id])
  cartId    String // Chave estrangeira para Cart
  cart      Cart    @relation(fields: [cartId], references: [id])

  // Armazenar o preço no momento da adição para consistência histórica
  // priceAtAddition Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}


model Order {
  id          String      @id @default(uuid())
  totalAmount Float       // Valor total do pedido
  status      OrderStatus @default(PENDING) // Status do pedido (usando um Enum)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  items       OrderItem[] // Itens do pedido

  // userId    String?
  // user      User?    @relation(fields: [userId], references: [id])

}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int
  price     Float   // Preço do produto NO MOMENTO DA COMPRA

  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId]) // Um produto específico só aparece uma vez por pedido
}

// Enum para o status do pedido
enum OrderStatus {
  PENDING    // Pedido realizado, aguardando pagamento/processamento
  PROCESSING // Pagamento confirmado, em processamento
  SHIPPED    // Enviado
  DELIVERED  // Entregue
  CANCELED   // Cancelado
  FAILED     // Falhou (ex: problema no pagamento)
}