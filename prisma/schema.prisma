// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Product {
  id          String  @id @default(uuid()) // ID único universal
  name        String
  description String?
  price       Float
  stock       Int     @default(0)
  sku         String? @unique
  imageUrl    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems CartItem[]
  orderItems OrderItem[]
}

model Cart {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[] // Relação um-para-muitos com CartItem

  // Para um carrinho "anônimo" que pode expirar ou ser identificado por uma sessão
  sessionId String? @unique

  // Relacionamento com User
  userId    String?  @unique // Um carrinho pode pertencer a um usuário (opcional e único)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade) // Se o usuário for deletado, seu carrinho também.
}

model CartItem {
  id        String  @id @default(uuid())
  quantity  Int
  productId String // Chave estrangeira para Product
  product   Product @relation(fields: [productId], references: [id])
  cartId    String // Chave estrangeira para Cart
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade) // Se o carrinho for deletado, os itens também são.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}


model Order {
  id          String      @id @default(uuid())
  totalAmount Float       // Valor total do pedido
  status      OrderStatus @default(PENDING) // Status do pedido (usando um Enum)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  items       OrderItem[] // Itens do pedido

  // Relacionamento com User
  userId    String? // Um pedido pode pertencer a um usuário
  user      User?   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: SetNull) // Se o usuário for deletado, o userId no pedido vira null.
                                                                                                    // onUpdate: Cascade é para se o ID do usuário mudar.

}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int
  price     Float   // Preço do produto NO MOMENTO DA COMPRA

  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade) // Se o pedido for deletado, os itens também são.

  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId]) // Um produto específico só aparece uma vez por pedido
}

// Enum para o status do pedido
enum OrderStatus {
  PENDING    // Pedido realizado, aguardando pagamento/processamento
  PROCESSING // Pagamento confirmado, em processamento
  SHIPPED    // Enviado
  DELIVERED  // Entregue
  CANCELED   // Cancelado
  FAILED     // Falhou (ex: problema no pagamento)
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique // Email deve ser único para login
  name      String?
  password  String   // Armazenar a senha hasheada

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  cart      Cart?    // Um usuário pode ter um carrinho (opcional, relação um-para-um)
  orders    Order[]  // Um usuário pode ter muitos pedidos
}